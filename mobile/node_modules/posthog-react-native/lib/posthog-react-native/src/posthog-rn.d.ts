import { PostHogCaptureOptions, PostHogCore, PostHogCoreOptions, PostHogEventProperties, PostHogFetchOptions, PostHogFetchResponse, PostHogPersistedProperty, SurveyResponse } from '../../posthog-core/src';
import { PostHogAutocaptureOptions, PostHogCustomAppProperties, PostHogCustomStorage, PostHogSessionReplayConfig } from './types';
import { OptionalReactNativeSessionReplay } from './optional/OptionalSessionReplay';
export type PostHogOptions = PostHogCoreOptions & {
    /** Allows you to provide the storage type. By default 'file'.
     * 'file' will try to load the best available storage, the provided 'customStorage', 'customAsyncStorage' or in-memory storage.
     */
    persistence?: 'memory' | 'file';
    /** Allows you to provide your own implementation of the common information about your App or a function to modify the default App properties generated */
    customAppProperties?: PostHogCustomAppProperties | ((properties: PostHogCustomAppProperties) => PostHogCustomAppProperties);
    /** Allows you to provide a custom asynchronous storage such as async-storage, expo-file-system or a synchronous storage such as mmkv.
     * If not provided, PostHog will attempt to use the best available storage via optional peer dependencies (async-storage, expo-file-system).
     * If `persistence` is set to 'memory', this option will be ignored.
     */
    customStorage?: PostHogCustomStorage;
    /** Captures app lifecycle events such as Application Installed, Application Updated, Application Opened, Application Became Active and Application Backgrounded.
     * By default is false.
     * If you're already using the 'captureLifecycleEvents' options with 'withReactNativeNavigation' or 'PostHogProvider, you don't need to set this.
     * If this is set, this value has priority over the 'captureLifecycleEvents' option.
     * Application Installed and Application Updated events are not supported with persistence set to 'memory'.
     */
    captureNativeAppLifecycleEvents?: boolean;
    /**
     * Enable Recording of Session Replays for Android and iOS
     * Requires Record user sessions to be enabled in the PostHog Project Settings
     * Defaults to false
     */
    enableSessionReplay?: boolean;
    /**
     * Configuration for Session Replay
     */
    sessionReplayConfig?: PostHogSessionReplayConfig;
    /**
     * If enabled, the session id ($session_id) will be persisted across app restarts.
     * This is an option for back compatibility, so your current data isn't skewed with the new version of the SDK.
     * If this is false, the session id will be always reset on app restart.
     * Defaults to false
     */
    enablePersistSessionIdAcrossRestart?: boolean;
};
export declare class PostHog extends PostHogCore {
    private _persistence;
    private _storage;
    private _appProperties;
    private _currentSessionId?;
    private _enableSessionReplay?;
    private _disableSurveys;
    private _disableRemoteConfig;
    constructor(apiKey: string, options?: PostHogOptions);
    ready(): Promise<void>;
    getPersistedProperty<T>(key: PostHogPersistedProperty): T | undefined;
    setPersistedProperty<T>(key: PostHogPersistedProperty, value: T | null): void;
    fetch(url: string, options: PostHogFetchOptions): Promise<PostHogFetchResponse>;
    getLibraryId(): string;
    getLibraryVersion(): string;
    getCustomUserAgent(): string;
    getCommonEventProperties(): PostHogEventProperties;
    screen(name: string, properties?: PostHogEventProperties, options?: PostHogCaptureOptions): Promise<void>;
    _isEnableSessionReplay(): boolean;
    _resetSessionId(reactNativeSessionReplay: typeof OptionalReactNativeSessionReplay | undefined, sessionId: string): void;
    getSessionId(): string;
    resetSessionId(): void;
    identify(distinctId?: string, properties?: PostHogEventProperties, options?: PostHogCaptureOptions): void;
    initReactNativeNavigation(options: PostHogAutocaptureOptions): boolean;
    getSurveys(): Promise<SurveyResponse['surveys']>;
    private startSessionReplay;
    private captureNativeAppLifecycleEvents;
    private persistAppVersion;
}
